"""Mypy stubs for pdcast/util/structs/list.pyx"""
from __future__ import annotations

from typing import Any, ClassVar, Generic, Hashable, Iterable, Iterator, TypeVar


# template type for the contents of a LinkedList
T = TypeVar("T")


class LinkedList(Generic[T]):

    __hash__: ClassVar[None] = ...  # type: ignore

    ######################
    ####    APPEND    ####
    ######################

    def __add__(self, other: Iterable[Any]) -> LinkedList[T]: ...
    def __iadd__(self, other: Iterable[Any]) -> LinkedList[T]: ...
    def __mul__(self, repeat: int) -> LinkedList[T]: ...
    def __imul__(self, repeat: int) -> LinkedList[T]: ...

    #####################
    ####    INDEX    ####
    #####################

    def __getitem__(self, index: int | slice) -> Any: ...
    def __setitem__(self, index: int | slice, value: Any) -> None: ...
    def __delitem__(self, index: int | slice) -> None: ...

    ###########################
    ####    COMPARISONS    ####
    ###########################

    def __lt__(self, other: Any) -> bool: ...
    def __le__(self, other: Any) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...

    ###############################
    ####    SPECIAL METHODS    ####
    ###############################

    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Any]: ...
    def __reversed__(self) -> Iterator[Any]: ...
    def __contains__(self, item: Any) -> bool: ...
    def __bool__(self) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
