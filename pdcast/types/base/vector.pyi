"""Mypy stubs for pdcast/types/base/vector.pyx"""
from typing import Any, Iterator, Mapping

from pdcast.types import DecoratorType, ScalarType, Type
from pdcast.util.type_hints import type_specifier


class VectorType(Type):
    instances: InstanceFactory
    encoder: ArgumentEncoder

    def __init__(self, **kwargs: Any) -> None: ...

    ##############################
    ####    INITIALIZATION    ####
    ##############################

    @classmethod
    def set_encoder(cls, encoder: ArgumentEncoder) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> VectorType: ...

    ##########################
    ####    ATTRIBUTES    ####
    ##########################

    @property
    def name(self) -> str: ...
    @property
    def kwargs(self) -> Mapping[str, Any]: ...
    @property
    def base_instance(self) -> VectorType: ...
    @property
    def is_parametrized(self) -> bool: ...
    @property
    def decorators(self) -> Iterator[DecoratorType]: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...

    ############################
    ####    BASE METHODS    ####
    ############################

    def unwrap(self) -> ScalarType: ...
    def replace(self, **kwargs: Any) -> VectorType: ...

    ###############################
    ####    SPECIAL METHODS    ####
    ###############################

    def __instancecheck__(self, instance: Any) -> bool: ...
    def __subclasscheck__(self, subclass: type) -> bool: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: type_specifier) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...


class ArgumentEncoder:
    def __call__(self, args: tuple[Any, ...], kwargs: dict[str, Any]) -> str: ...


class BackendEncoder(ArgumentEncoder):
    def __init__(self, backend: str) -> None: ...


class InstanceFactory:
    def __init__(self, base_class: type) -> None: ...
    def __call__(self, args: tuple[Any, ...], kwargs: dict[str, Any]) -> VectorType: ...


class FlyweightFactory(InstanceFactory):
    def __init__(
        self, base_class: type, encoder: ArgumentEncoder, cache_size: int
    ) -> None:
        ...
    def keys(self) -> Iterator[str]: ...
    def values(self) -> Iterator[VectorType]: ...
    def items(self) -> Iterator[tuple[str, VectorType]]: ...
    def __contains__(self, key: str) -> bool: ...
    def __getitem__(self, key: str) -> VectorType: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[str]: ...
    def __repr__(self) -> str: ...
