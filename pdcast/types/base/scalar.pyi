"""Mypy stubs for pdcast/types/base/scalar.pyx"""
from typing import Any, Callable, Iterator, Mapping

from pdcast.types import CompositeType, ScalarType, VectorType
from pdcast.util.type_hints import dtype_like, array_like, type_specifier


class ScalarType(VectorType):

    ############################
    ####    CONSTRUCTORS    ####
    ############################

    def from_string(self, *args: str) -> ScalarType: ...
    def from_dtype(
        self, dtype: dtype_like, array: array_like | None = ...
    ) -> ScalarType:
        ...
    def from_scalar(self, example: Any) -> ScalarType: ...

    ##########################
    ####    MEMBERSHIP    ####
    ##########################

    def contains(self, other: type_specifier) -> bool: ...

    #############################
    ####    CONFIGURATION    ####
    #############################

    _cache_size: int
    _backend: str | None

    @property
    def type_def(self) -> type: ...
    @property
    def dtype(self) -> dtype_like: ...
    @property
    def itemsize(self) -> int: ...
    @property
    def is_numeric(self) -> bool: ...
    @property
    def max(self) -> int: ...
    @property
    def min(self) -> int: ...
    @property
    def is_nullable(self) -> bool: ...
    @property
    def na_value(self) -> Any: ...
    def make_nullable(self) -> ScalarType: ...

    #######################
    ####    SETTERS    ####
    #######################

    @type_def.setter
    def type_def(self, val: type) -> None: ...
    @dtype.setter
    def dtype(self, val: dtype_like) -> None: ...
    @itemsize.setter
    def itemsize(self, val: int) -> None: ...
    @is_numeric.setter
    def is_numeric(self, val: bool) -> None: ...
    @max.setter
    def max(self, val: int) -> None: ...
    @min.setter
    def min(self, val: int) -> None: ...
    @is_nullable.setter
    def is_nullable(self, val: bool) -> None: ...
    @na_value.setter
    def na_value(self, val: Any) -> None: ...

    #########################
    ####    TRAVERSAL    ####
    #########################

    @property
    def is_root(self) -> bool: ...
    @property
    def root(self) -> ScalarType: ...
    @property
    def supertype(self) -> AbstractType | None: ...
    @property
    def generic(self) -> AbstractType: ...
    @property
    def implementations(self) -> Mapping[str, ScalarType]: ...
    @property
    def subtypes(self) -> CompositeType: ...
    @property
    def is_leaf(self) -> bool: ...
    @property
    def leaves(self) -> CompositeType: ...

    ###############################
    ####    UPCAST/DOWNCAST    ####
    ###############################

    @property
    def larger(self) -> Iterator[ScalarType]: ...
    @property
    def smaller(self) -> Iterator[ScalarType]: ...
    def __lt__(self, other: type_specifier) -> bool: ...


class AbstractType(ScalarType):
    @classmethod
    def default(
        cls, concretion: type | None = ..., *, warn: bool = ...
    ) -> Callable[[type], type]: ...
    @classmethod
    def implementation(
        cls, backend: str, validate: bool = ...
    ) -> Callable[[type], type]: ...
    @classmethod
    def subtype(
        cls, subtype: type | None = ..., *, validate: bool = ...
    ) -> Callable[[type], type]: ...

